//1.1
public void insert(int item, int position){
    if(this.first == null || position == 0){
        this.addFirst(item);
        return;
    }
    IntNode currentNode = first；
    while(position > 1 && currentNode != null){
        position --;
        currentNode = currentNode.next;
    }
    IntNode newNode = new IntNode(item, currentNode.next);
    currentNode.next = newNode;
}

//1.2
//recursively
public void reverse(){
    first = reverseRecursiveHelper(first);
}

public void reverseRecursiveHelper(IntNode front){
    if(a == null || a.next == null){
        return front;
    }
    IntNode reserved = reverseRecursiveHelper(front.next);
    front.next.next = front;
    front.next = null;
    return reserved;
}

1.3
//iteratively
public void reserve(){
    IntNode frontOfReversed = null;
    IntNode nextNodeToAdd = first;
    while(nextNodeToAdd.next != null){
        IntNode remainderOfOriginal = nextNodeToAdd.next;
        nextNodeToAdd.next = frontOfReversed;
        frontOfReversed = nextNodeToAdd;
        nextNodeToAdd = remainderOfOriginal;
    }
    first = frontOfReversed;
}

2.1
public static int[] insert(int[] arr, int item, int position){
    int[] newArr = new int[arr.length + 1];
    position = Math.min(arr.length + 1, position);
    for(int a = 0;a < position;a++){
        newArr[a] = item;
    }
    newArr[position] = arr[position];
    for(;position < arr.length;position++){
        newArr[position] = arr[position];
    }
    return newArr;
}

2.2
public static void reverse(int[] arr){
    length = arr.length;
    for(int i = 0;i < arr.length / 2;i++){
        temp = arr[i];
        arr[i] = arr[length - 1 - i];
        arr[length - 1 - i] = temp;
    }
}

2.3
public static int[] replicate(int[] arr){
    int total = 0;
    for(int item : arr){
        total += item;
    }
    int[] res = new int[total];
    int t = 0;
    for(int item : arr){
        for(int j = 0;j < item;j++){
            res[t] = item；
            t++;
        }
    }
    return res;
}