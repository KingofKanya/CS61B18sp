2.a
public boolean twoSum(int[] A, int k) {
        Map<Integer, Integer> hashTable = new HashMap<>();
        for (int i = 0; i < A.length; i++) {
            if (hashTable.containsKey(k - nums[i])) {
                return true;
            }
            hashTable.put(nums[i], i);
        }
        return false;
    }

2.b
public static void topFivePopularWords(String[] words, int k) {
        Map<String, Integer> hashTable = new HashMap<>();
        for (String word : words) {
            if(hashTable.containsKey(word)){
                hashTable.put(word, hashTable.get(word) + 1);
                // value 值会被覆盖
            }else{
                hashTable.put(word, 1);
            }
        }

        PriorityQueue<String> pq = new PriorityQueue<>(new Comparator<String>() {
            @Override
            public int compare(String a, String b) {
                return hashTable.get(a) - hashTable.get(b);
            }
        });

        pq.addAll(hashTable.keySet());

        for (int i = 0; i < k; i++) {
            System.out.println(pq.poll());
        }
    }

3.a
public class Queue<E> {
    Stack<E> s1 = new Stack<>();
    Stack<E> s2 = new Stack<>();

    public void push(E element){
        s1.push(element);
    }

    public E poll(){
        while (!s1.isEmpty()){
            s2.push(s1.pop());
        }
        E toPoll = s2.pop();
        while (!s2.isEmpty()){
            s1.push(s2.pop());
        }
        return toPoll;
    }
}

// 参考答案的第一行写错了

3.b
public class SortedStack <E extends Comparable<E>>  {
    private Stack<E> a;
    private Stack<E> b;
    public void push(E e){
        while(!a.isEmpty() && a.peek().compareTo(e) < 0){
            b.push(a.pop());
        }
        a.push(e);
        while(!b.isEmpty()){
            a.push(b.pop());
        }
    }

    public E pop(){
        return a.pop();
    }
}
